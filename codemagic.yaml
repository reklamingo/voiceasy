workflows:
  capacitor_ios_release:
    name: Voiceasy iOS (Capacitor) – Release
    max_build_duration: 60
    instance_type: mac_mini_m1

    environment:
      xcode: 15.4
      node: 20.11.1
      vars:
        BUNDLE_ID: com.voiceasy.app
        APPLE_TEAM_ID: 377ECJLA2T
        SCHEME: App
      groups:
        - app_store_connect    # APP_STORE_CONNECT_* değişkenleri burada

    scripts:
      - name: Install dependencies
        script: |
          set -e
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "package-lock.json yok, npm install ile devam ediliyor"
            npm install --no-audit --no-fund
          fi

      - name: Build web assets
        script: |
          set -e
          if npm run | grep -q " build"; then
            npm run build
          else
            echo "package.json'da build script yok, atlanıyor"
          fi

      - name: Ensure iOS platform exists (Capacitor)
        script: |
          set -e
          if ! npm ls @capacitor/ios --depth=0 >/dev/null 2>&1; then
            npm install @capacitor/ios --save-exact
          fi
          if [ ! -d "ios" ]; then
            echo "Capacitor iOS platformu ekleniyor..."
            npx cap add ios
          else
            echo "iOS platformu zaten var, devam."
          fi

      - name: Capacitor sync (iOS project)
        script: |
          set -e
          npx cap config set appId com.voiceasy.app appName "Voiceasy"
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update

      # ---------------------------------------------------------
      # 1) Sertifika + profil çek (gerekirse yeni Distribution üret)
      # ---------------------------------------------------------
      - name: Fetch signing files (auto from App Store Connect)
        script: |
          set -e
          for v in APP_STORE_CONNECT_ISSUER_ID APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_PRIVATE_KEY BUNDLE_ID; do
            if [ -z "${!v}" ]; then
              echo "ERROR: $v boş. Codemagic > Environment variables (group: app_store_connect) kontrol edin."
              exit 1
            fi
          done

          # Yeni Distribution sertifikası için private key hazırla
          openssl genrsa -out certificate_private_key.pem 2048

          # Sertifika/profil çek (Apple'da mevcut aktif dağıtım sertifikası varsa create 409 dönebilir)
          set +e
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --type IOS_APP_STORE \
            --create \
            --certificate-key @file:certificate_private_key.pem \
            --p12-password ""
          EC=$?
          set -e

          if [ $EC -ne 0 ]; then
            echo "‼️ Yeni sertifika oluşturma başarısız olabilir (çoğunlukla aktif Distribution varken 409 döner)."
            echo "Apple Developer > Certificates bölümünde mevcut iOS Distribution sertifikalarını REVOKE edip tekrar deneyin."
            exit $EC
          fi

      # ---------------------------------------------------------
      # 2) .p12’yi keychain’e import et ve erişim izni ver
      # ---------------------------------------------------------
      - name: Add certificates to keychain (import .p12)
        script: |
          set -e
          KEYCHAIN_PATH="$HOME/Library/Keychains/login.keychain-db"
          security unlock-keychain -p "" "$KEYCHAIN_PATH" || true

          FOUND=false
          for P12 in "$HOME/Library/MobileDevice/Certificates"/*.p12; do
            [ -f "$P12" ] || continue
            echo "Importing $P12"
            security import "$P12" -k "$KEYCHAIN_PATH" -P "" -T /usr/bin/codesign -T /usr/bin/security
            FOUND=true
          done

          if [ "$FOUND" = false ]; then
            echo "ERROR: İçeri alınacak .p12 bulunamadı. Bir önceki adım başarısız olmuş olabilir."
            exit 1
          fi

          # codesign araçlarına erişim izni
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN_PATH" || true

      # ---------------------------------------------------------
      # 3) Kimlik kontrolü: Apple Distribution + private key şart
      # ---------------------------------------------------------
      - name: Check signing identities (must have Apple Distribution with private key)
        script: |
          set -e
          echo "Available code signing identities:"
          security find-identity -v -p codesigning || true

          security find-identity -v -p codesigning | grep -q "Apple Distribution" || {
            echo "ERROR: Apple Distribution kimliği bulunamadı (private key yok)."
            echo "Mevcut Distribution sertifikalarını revoke edip tekrar deneyin ki yeni sertifika private key ile üretilebilsin."
            exit 1
          }

      # ---------------------------------------------------------
      # 4) Provisioning profile’ı sadece App target’a uygula
      # ---------------------------------------------------------
      - name: Apply provisioning profile to App target only
        script: |
          set -e
          cd ios/App
          PROFILE_PATH="$(ls -t ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -n 1)"
          if [ -z "$PROFILE_PATH" ]; then
            echo "ERROR: Provisioning profile bulunamadı"; exit 1
          fi
          echo "Using provisioning profile: $PROFILE_PATH"

          xcode-project use-profiles \
            --project "App.xcodeproj" \
            --profile "$PROFILE_PATH" \
            --archive-method app-store \
            --warn-only

          # Specifier (Name) çek ve env’e yaz
          TMP_PLIST="$(mktemp)"
          security cms -D -i "$PROFILE_PATH" > "$TMP_PLIST"
          PP_SPECIFIER="$(/usr/libexec/PlistBuddy -c 'Print :Name' "$TMP_PLIST" 2>/dev/null || true)"
          rm -f "$TMP_PLIST"
          [ -z "$PP_SPECIFIER" ] && PP_SPECIFIER="$(basename "$PROFILE_PATH" .mobileprovision)"
          echo "PP_SPECIFIER=$PP_SPECIFIER" | tee -a $CM_ENV

      # ---------------------------------------------------------
      # 5) IPA oluştur (manual signing App target; Pods Automatic)
      # ---------------------------------------------------------
      - name: Build .ipa (manual signing for App target; Pods automatic)
        script: |
          set -e
          cd ios/App

          if [ -d "App.xcworkspace" ]; then
            WS_OPT='--workspace App.xcworkspace'
            echo "Using workspace App.xcworkspace"
          else
            WS_OPT='--project App.xcodeproj'
            echo "Workspace yok, project ile derleniyor"
          fi

          # ExportOptions: manual signing + app-store
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${APPLE_TEAM_ID}</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PP_SPECIFIER}</string>
            </dict>
          </dict></plist>
          EOF

          # Yalnızca bundle id ve team'i zorluyoruz (profil/kimliği burada sabitlemiyoruz)
          XCARGS="PRODUCT_BUNDLE_IDENTIFIER=${BUNDLE_ID} DEVELOPMENT_TEAM=${APPLE_TEAM_ID}"

          xcode-project build-ipa \
            $WS_OPT \
            --scheme "$SCHEME" \
            --config Release \
            --archive-xcargs "$XCARGS" \
            --export-options-plist exportOptions.plist \
            --disable-xcpretty \
            --log-stream stderr

      # ---------------------------------------------------------
      # 6) IPA’yı App Store Connect’e yükle
      # ---------------------------------------------------------
      - name: Upload to App Store Connect (no auto-submit)
        script: |
          set -e
          IPA_PATH="$(find . -type f -name '*.ipa' -o -name '*.IPA' | head -n 1)"
          if [ -z "$IPA_PATH" ]; then IPA_PATH="$(find .. -type f -name '*.ipa' -o -name '*.IPA' | head -n 1)"; fi
          if [ -z "$IPA_PATH" ]; then IPA_PATH="$(find ../../ -type f -name '*.ipa' -o -name '*.IPA' | head -n 1)"; fi
          if [ -z "$IPA_PATH" ]; then
            echo "ERROR: IPA bulunamadı, build çıktısını kontrol edin."
            exit 1
          fi

          echo "Uploading IPA: $IPA_PATH"
          app-store-connect publish \
            --path "$IPA_PATH" \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --submit-for-review=false

    artifacts:
      - ios/App/build/ios/ipa/*.ipa
      - build/ios/ipa/*.ipa
      - ~/Library/Developer/Xcode/Archives/**/*.xcarchive
